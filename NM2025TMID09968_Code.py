# -*- coding: utf-8 -*-
"""NM2025TMID09968_team06.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1OyLEqU9Qguw-ApZugv_mFolZFBVgfF2G
"""

!pip install transformers torch
!pip install -q gradio







import gradio as gr
import torch
from transformers import AutoTokenizer, AutoModelForCausalLM

# =======================
# Model Loading
# =======================
model_name = "ibm-granite/granite-3.2-2b-instruct"
tokenizer = AutoTokenizer.from_pretrained(model_name)
model = AutoModelForCausalLM.from_pretrained(
    model_name,
    torch_dtype=torch.float16 if torch.cuda.is_available() else torch.float32,
    device_map="auto" if torch.cuda.is_available() else None
)

# Ensure tokenizer has a pad token
if tokenizer.pad_token is None:
    tokenizer.pad_token = tokenizer.eos_token

# =======================
# AI Response Function
# =======================
def generate_response(prompt, max_length=1024):
    inputs = tokenizer(prompt, return_tensors="pt", truncation=True, max_length=512)

    if torch.cuda.is_available():
        inputs = {k: v.to(model.device) for k, v in inputs.items()}

    with torch.no_grad():
        outputs = model.generate(
            **inputs,
            max_length=max_length,
            temperature=0.7,
            do_sample=True,
            pad_token_id=tokenizer.eos_token_id
        )

    response = tokenizer.decode(outputs[0], skip_special_tokens=True)
    return response.replace(prompt, "").strip()

# =======================
# Custom Functions
# =======================
def city_analysis(city_name):
    prompt = f"""
    Provide a detailed, professional analysis of the city '{city_name}' including:
    1. Crime Index and safety statistics
    2. Accident rates and traffic safety information
    3. Overall safety assessment

    City: {city_name}
    Analysis:
    """
    return generate_response(prompt, max_length=1000)

def citizen_interaction(query):
    prompt = f"""
    As a government assistant, provide accurate and clear information about the following query:
    Query: {query}
    Response:
    """
    return generate_response(prompt, max_length=1000)

# =======================
# Modern Professional CSS
# =======================
modern_css = """
body {
    background-color: #f4f7fb;
    font-family: 'Segoe UI', 'Helvetica Neue', sans-serif;
    color: #2c3e50;
}

.gradio-container {
    max-width: 950px;
    margin: auto;
    background: #ffffff;
    border-radius: 18px;
    box-shadow: 0 4px 16px rgba(0,0,0,0.06);
    padding: 30px;
}

h1, h2, h3 {
    color: #1c2d40;
    font-weight: 600;
    text-align: center;
    margin-bottom: 8px;
}

p {
    text-align: center;
    color: #666;
    font-size: 15px;
    margin-bottom: 25px;
}

/* Buttons */
button {
    background-color: #2f73c0 !important;
    color: white !important;
    border: none !important;
    border-radius: 50px !important; /* pill shape */
    font-weight: 600 !important;
    padding: 12px 24px !important;
    font-size: 15px !important;
    transition: all 0.3s ease-in-out;
    box-shadow: 0 3px 6px rgba(0,0,0,0.1) !important;
}

button:hover {
    background-color: #1f4f87 !important;
    transform: translateY(-1px);
    box-shadow: 0 5px 10px rgba(0,0,0,0.15) !important;
}

/* Text inputs */
input[type="text"], textarea {
    background-color: #f9fafc !important;
    border: 1px solid #d1d9e0 !important;
    border-radius: 10px !important;
    padding: 10px 14px !important;
    font-size: 14px;
    transition: border 0.3s ease;
}

input[type="text"]:focus, textarea:focus {
    border-color: #2f73c0 !important;
    outline: none !important;
}

/* Tabs */
.tab-nav {
    background-color: #f0f4f8 !important;
    border-radius: 12px !important;
    padding: 4px !important;
}

.tab-nav button {
    background-color: transparent !important;
    color: #2f73c0 !important;
    font-weight: 500 !important;
    padding: 8px 18px !important;
    border-radius: 8px !important;
    transition: all 0.3s;
}

.tab-nav button:hover {
    background-color: #e3ebf6 !important;
}

.tab-nav button.selected {
    background-color: #2f73c0 !important;
    color: white !important;
}

/* Loader Styling */
.loading-spinner {
    border: 4px solid #f3f3f3;
    border-top: 4px solid #2f73c0;
    border-radius: 50%;
    width: 28px;
    height: 28px;
    animation: spin 1s linear infinite;
    margin: auto;
    margin-top: 10px;
}

@keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
}
"""

# =======================
# Gradio Interface
# =======================
with gr.Blocks(css=modern_css) as app:
    gr.Markdown("<h1>City Analysis & Citizen Services AI</h1>")
    gr.Markdown("<p>Analyze city safety data and provide citizen support with an intuitive, professional interface.</p>")

    with gr.Tabs():
        # -----------------------
        # City Analysis Tab
        # -----------------------
        with gr.TabItem("City Safety Analysis"):
            gr.Markdown("### Safety, Crime & Traffic Insights")
            with gr.Row():
                with gr.Column():
                    city_input = gr.Textbox(
                        label="City Name",
                        placeholder="e.g., New York, London, Mumbai",
                        lines=1
                    )
                    analyze_btn = gr.Button("Run Analysis")

                with gr.Column():
                    city_output = gr.Textbox(
                        label="City Analysis Report",
                        lines=15,
                        placeholder="Analysis will be displayed here..."
                    )

            # Show spinner while processing
            analyze_btn.click(city_analysis, inputs=city_input, outputs=city_output)

        # -----------------------
        # Citizen Services Tab
        # -----------------------
        with gr.TabItem("Citizen Support Services"):
            gr.Markdown("### Information & Assistance for Public Queries")
            with gr.Row():
                with gr.Column():
                    citizen_query = gr.Textbox(
                        label="Enter Your Query",
                        placeholder="e.g., How to apply for a driving license?",
                        lines=4
                    )
                    query_btn = gr.Button("Get Information")

                with gr.Column():
                    citizen_output = gr.Textbox(
                        label="Government Response",
                        lines=15,
                        placeholder="Response will appear here..."
                    )

            # Spinner while processing
            query_btn.click(citizen_interaction, inputs=citizen_query, outputs=citizen_output)

# =======================
# Launch App
# =======================
app.launch(share=True)